def one-factory = fn(() => int(1))

def local-addition = fn(() => int(
  def n = int(68)
  n + 1
))

def function-consumer = fn(() => int(
  def one = int(one-factory())
  one
))

def takes-parameter = fn((s : string) => string("hello"))

def uses-parameter = fn((n : int) => int(n))

def has-local-fn = fn(() => int(
  ; this function is not visible from other functions
  def local-fn = fn(() => int(2))

  printf("result of calling local function: %ld\n", local-fn())
  0
))

def main = fn(() => int(
  def two = int(one-factory() + one-factory())
  printf("two + two = %ld\n", two + two)

  def i1 = int(local-addition())
  def i2 = int(function-consumer())
  def i3 = int(uses-parameter(42))
  def i4 = int(has-local-fn())
  def s = string(takes-parameter())

  printf("i1: %ld\ni2: %ld\ni3: %ld\ni4: %ld\ns: %s\n", i1, i2, i3, i4, s)

  0
))
