; IDEAS:

defp main: int = argc: int, argv: string[] = ; list<string> ??
  defv my-var = 4 - 2

  printf "Hello world\n"

main = fn(argc: int, argv: string[]) => int
  printf "Hello world\n"

def fn<<argc: int, argv: list<string>>, int> main = 
  def int my-var = 4 - 2
  printf "Hello world\n"

  0 ; implicit return

def main = fn(argc: int, argv: list<string>) => int(
  def my-var = int(1) ; my-var is the integer 1
  def my-var-p = ref(my-var) ; my-var-p is a reference to my-var

  0
)

;;; THIS IS GOOD !!
; A function that returns a function that returns an int
def returns-fn = fn(num: int =>
  fn(num2: int =>
    int(num1 + num2)
  )
)

; is a function
def curried = fn(returns-fn(3))

; is an int - 5
def uses-curried = int(curried(2)) 

def add = fn(num1: int, num2: int =>
  int(num1 + num2)
)

; this is an error, no int() constructor
def add = fn(num1: int, num2: int =>
  num1 + num2
)
