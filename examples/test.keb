def a = list(int => 1, 2, 3)
def l = list(string => "123", "gg", "hhh")
def b = fn((a : int) => int(2))
def c = bool(1 == -2)

def asd = fn((gg : fn(int, int) => string) => int(
  2 + 4 + 2
))

def asd1 = fn((var : list(fn(list(int)) => string)) => char('c'))

def ret-fn = fn((outer : int) => fn((inner : int) => int(outer + inner)))
def ret-fn-rets-list = fn((outer : int) => fn((inner : int) => list(int => 
  def local-var = int(2)
  local-var, outer, inner
)))

def add = int(def nested = int(5) 2 + nested)
def should-be-ok = int(2
                       +
                       3)
def some-string = string("yolo")

def c = fn((num1 : int, num2 : int) => int(
  num1 + num2 ; should be ignoreda jdkljflks
))

def takes-fn = fn((my-function : fn(int, string) => int) => int(
  my-function(4, "hello")
))

; mutability (constant by default)
def mut my-var = int(4)
set my-var = int(6)



   ;dasd
   ;dasd


; this should error
def my-const = int(~4) ; should error
set my-const = int(6) ; should also error
 ; TODO: allow not using constructors when type is already known (infer type here, maybe hard)






def ch = char('c')
def str = string("hey")

